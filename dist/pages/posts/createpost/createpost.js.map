{"version":3,"file":"pages/posts/createpost/createpost.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAFA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AC7NA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AARA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnCA;AAAA;AAAA;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://frontend/._src_pages_posts_createpost_createpost.tsx","webpack://frontend/._src_common_utilities_uploadImageToOss.ts","webpack://frontend/./src/pages/posts/createpost/createpost.tsx?2006"],"sourcesContent":["import { useState, useRef } from 'react'\nimport Taro from '@tarojs/taro'\nimport { View, Text, Button, Input } from '@tarojs/components'\nimport PubSub from 'pubsub-js';\n\n// stores\nimport useStore from '@/store/store'\nimport useRequest from '@/store/request'\nimport useAppInfo from '@/store/appInfo';\nimport useUser from '@/store/userInfo';\n\n// utilities\nimport { uploadImageToOss } from '@/common/utilities/uploadImageToOss';\n\nimport './createpost.css'\n\n\nexport default function createpost() {\n\n  const statusBarHeight = useStore((state) => state.statusBarHeight);\n  const [requestUrl, ossUrl] = useRequest((state) => [state.requestUrl, state.OSSUrl]);\n  const userId = useUser((state) => state.id);\n  const ossAccessKeyId = useAppInfo((state) => state.accessKey_id);\n\n  const [tags, setTags] = useState<string[]>([\n    \"校园日常\", \"新生\", \"求助\", \"交友\", \"考研\", \"实习兼职\"\n  ]);\n\n  const [selectedTag, setSelectedTag] = useState<string>();\n  const [selectedImages, setSelectedImages] = useState<string[]>([]);\n\n  const titleRef = useRef<HTMLInputElement>(null);\n  const contentRef = useRef<HTMLTextAreaElement>(null);\n\n  // 处理话题选择逻辑\n  function handleTagSelect(tag: string) {\n    setSelectedTag(tag)\n    // if (selectedTags.includes(tag)) {\n    //   setSelectedTags(selectedTags.filter(t => t !== tag))\n    // } else if (selectedTags.length < 2) {\n    //   setSelectedTags([...selectedTags, tag])\n    // } else {\n    //   Taro.showToast({\n    //     title: '最多选择两项',\n    //     icon: 'none'\n    //   })\n    // }\n  }\n\n  // 处理图片选择，将图片存入 selectedImages\n  async function handleImageSelect() {\n    const res = await Taro.chooseImage({\n      count: 9 - selectedImages.length, // 最多可以选择9张图片\n      sourceType: ['album', 'camera'],\n      sizeType: ['compressed'],\n    });\n\n    if (res.tempFilePaths.length === 0) return;\n\n    setSelectedImages([...selectedImages, ...res.tempFilePaths]);\n  };\n\n  // 处理图片删除\n  function handleDeleteClick(index: number) {\n    const newImages = [...selectedImages];\n    newImages.splice(index, 1);\n    setSelectedImages(newImages);\n  }\n\n  // 发布帖子\n  async function handleSubmit() {\n    try {\n      if (titleRef.current && contentRef.current) {\n\n        if ( titleRef.current.value.length > 25 ) {\n          Taro.showToast({\n            title: '标题超出长度',\n            icon: 'error'\n          })\n          return\n        } else if ( contentRef.current.value.length > 1000 ) {\n          Taro.showToast({\n            title: '内容超出长度',\n            icon: 'error'\n          })\n          return\n        } else if ( titleRef.current.value.length < 1 || contentRef.current.value.length < 1 ) {\n          Taro.showToast({\n            title: titleRef.current.value.length < 1 ? '请填写标题' : '请填写内容',\n            icon: 'error'\n          })\n          return\n        } else if (selectedTag === '' || selectedTag === undefined) {\n          Taro.showToast({\n            title: '请选择话题',\n            icon: 'error'\n          })\n          return\n        }\n\n        // 待上传的数据\n        const title = titleRef.current.value\n        const content = contentRef.current.value\n        const tag = selectedTag\n\n        // 处理图片上传 ///////////////////////////////\n        const imagePaths: string[] = selectedImages;\n        \n        // 1. 上传图片到阿里 OSS\n        const uploadOssRes = await uploadImageToOss(ossAccessKeyId, userId, ossUrl, imagePaths); // uploadRes from oss\n        \n        // 2. 检查上传结果，图片上传失败抛出错误，终止上传\n        uploadOssRes.ossRes.forEach((res, index) => {\n          if (res.statusCode !== 204) {\n            \n            Taro.showToast({\n              title: `上传失败: ${index + 1}`,\n              icon: 'error'\n            });\n\n            throw new Error(\"image upload failed\");\n          };\n        });\n\n        // 3. 获取图片链接\n        const uploadedImagePaths = uploadOssRes.filenames.map(filename => {\n          return `${ossUrl}/${filename}`\n        });\n\n        console.log(uploadedImagePaths);\n\n\n        Taro.request({\n          url: requestUrl + '/v1/posts/',\n          method: 'POST',\n          data: {\n            title: title,\n            content: content,\n            pictures: uploadedImagePaths,\n            tag: tag,\n          },\n          header: {\n            authorization: Taro.getStorageSync('token')\n          },\n\n          success: function (res) {\n            if (res.statusCode === 201) {\n\n              Taro.showToast({\n                title: '发布成功',\n                icon: 'success'\n              });\n              // 1.5秒后返回，刷新首页\n              setTimeout(() => {\n                Taro.navigateBack();\n                PubSub.publish('refreshPage');\n              }, 1500);\n\n            } else {\n\n              Taro.showToast({\n                title: '发布失败',\n                icon: 'none'\n              });\n            };\n          }\n        });\n      }\n\n    } catch (err) {\n      return err\n    }\n  };\n\n  return (\n    <View className='createpost-wrapper' style={{ paddingTop: statusBarHeight + 'px' }}>\n      <View className='createpost-header'>\n        <View className='createpost-header-back' onClick={() => { Taro.navigateBack() }}></View>\n        <Text className='createpost-header-title'>发布</Text>\n      </View>\n      <form className='createpost-form'>\n        <Input ref={titleRef} className='createpost-title' type=\"text\" name='title' placeholder='填写标题会更受欢迎哦！（小于25字）' />\n        <textarea ref={contentRef} className='createpost-content' name=\"content\" placeholder='添加正文（小于1000字）'></textarea>\n        <View className='createpost-uploadPic-area'>\n          {\n            selectedImages.map((image, index) => (\n              <View key={index} className='createpost-selectedImage-wrapper'>\n                < img className='createpost-selectedImage' src={image} alt={`Selected-${index}`} />\n                <View className='createpost-delete-btn' onClick={() => handleDeleteClick(index)}>&times;</View>\n              </View>\n            ))\n          }\n          {selectedImages.length < 9 && <View className='createpost-uploadPic-btn' onClick={handleImageSelect}></View>}\n        </View>\n        <View className='createpost-postTags'>\n          <Text>选择话题*</Text>\n          <Text>话题决定了你发布的内容是否会你所期望的同学看到</Text>\n          <View className='createpost-tags'>\n            {\n              tags.map((item, index) => {\n                return (\n                  <View\n                    className='createpost-tag'\n                    key={index}\n                    onClick={() => handleTagSelect(item)}\n                    style={{\n                      backgroundColor: selectedTag === item ? '#4E6AFF' : '#efefef',\n                      color: selectedTag === item ? '#fff' : '#8b8b8b'\n                    }}\n                  >\n                    {item}\n                  </View>\n                )\n              })\n            }\n          </View>\n        </View>\n        <Button className='createpost-submit' formType='submit' onClick={handleSubmit}>发布</Button>\n      </form>\n    </View>\n  )\n}","import Taro from '@tarojs/taro'\n\nimport compressImage from '../launchUtilities/compressImage';\n\nexport const uploadImageToOss = async (accessKeyId: string, userId: string, ossUrl, imagePaths: string[]) => {\n    // 获取 OSS 通行证, OSS 通行证在 APP 加载时 / 用户登录注册成功后便已请求\n    const policy = Taro.getStorageSync('policy'); // OSS policy\n    const signature = Taro.getStorageSync('signature'); // OSS 签名\n    const ossAccessKeyId = accessKeyId; // 阿里云 RAM 用户 accessKeyId\n    let filenames: string[] = []; // 所有上传文件的文件名\n\n\n    // 1. 创建多个 promise 上传任务\n    const uploadTask = imagePaths.map(async (imagePath) => {\n        const key = `postImage-${userId}-${Date.now()}`; // 上传的文件名\n        filenames.push(key);\n\n        const imagePromise = Taro.uploadFile({\n            url: ossUrl,\n            filePath: await compressImage(imagePath), // 压缩图片\n            name: 'file',\n            formData: {\n                key: key,\n                policy: policy,\n                OSSAccessKeyId: ossAccessKeyId,\n                signature: signature,\n            },\n        });\n\n        return imagePromise;\n    });\n\n    // 2. 等待所有上传任务完成\n    const uploadossRes = await Promise.all(uploadTask);\n\n    return {\n        ossRes: uploadossRes,\n        filenames: filenames,\n    };\n};","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./createpost.tsx\"\nvar config = {};\n\n\nvar inst = Page(createPageConfig(component, 'pages/posts/createpost/createpost', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}